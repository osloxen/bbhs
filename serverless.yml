# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: BBHS-Service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 30
  region: us-west-2
#  memorySize: 3008

#  stage: dev
#  stage: prodaug2018
  stage: prodsept2018




functions:


  getBookList:
    handler: academics-handler.getBookList
    events:
            - http:
                path: /booklist
                method: get


  getTypeOfDayFromSheet:
    handler: typeofday-handler.getTypeOfDayFromSheet
    events:
            - http:
                path: /type-of-day
                method: get


  getTodayBellSchedule:
    handler: bell-schedule-handler.getBellSchedule
    events:
            - http:
                path: /bell-schedule-today
                method: get


  blanchetAlexaSkill:
    handler: bbhs-alexa.handler
    events:
      - alexaSkill


  getDayDetails:
    handler: bbhsHandler.getDayDetails
    events:
            - http:
                path: /day-details
                method: get


  getScheduleSneakPeek:
    handler: bbhsHandler.getAllCalendarDataSchedSummary
    events:
            - http:
                path: /sched-sneak-peek
                method: get


  getAllActivities:
    handler: bbhsHandler.getAllArtsAndActivities
    events:
            - http:
                path: /activities/activities-schedule
                method: get


  getActivityFromCalendar:
    handler: bbhsHandler.getArtsAndActivitiesFromCalendar
    events:
            - http:
                path: /activities/schedule/{activity}
                method: get


  getSportsTeamSchedule:
    handler: bbhsHandler.getTeamScheduleFromCalendar
    events:
            - http:
                path: /sports/schedule/{sport}
                method: get


  getCoachInfo:
    handler: bbhsHandler.getCoachInfo
    events:
            - http:
                path: /sports/coaches/{sport}
                method: get


  getTwitterFeed:
    handler: bbhsHandler.getTwitterFeed
    events:
            - http:
                path: /sports/twitter/{sport}
                method: get


  getActivityPictures:
    handler: bbhsHandler.getActivityPictures
    events:
            - http:
                path: /sports/pictures/{sport}
                method: get


  getActivityKey:
    handler: bbhsHandler.getActivityKey
    events:
            - http:
                path: /sports/key/{sport}
                method: get


  # getTeamSchedule:
  #   handler: bbhsHandler.getTeamSchedule
  #   events:
  #           - http:
  #               path: /sports/schedule/{sport}
  #               method: get


  getTeamRoster:
    handler: bbhsHandler.getTeamRoster
    events:
            - http:
                path: /sports/roster/{sport}
                method: get


  getSportAnnouncement:
    handler: bbhsHandler.getSportAnnouncement
    events:
            - http:
                path: /sports/announcement/{sport}
                method: get


  getSportTryoutInfo:
    handler: bbhsHandler.getTryoutInfo
    events:
            - http:
                path: /sports/tryouts/{sport}
                method: get

  getSport:
    handler: bbhsHandler.getSportDetails
    events:
            - http:
                path: /sports/{sport}
                method: get

  getListOfSports:
    handler: bbhsHandler.getListOfSports
    events:
            - http:
                path: /sports
                method: get

  getListOfArtsActivities:
    handler: bbhsHandler.getListOfArtsActivities
    events:
            - http:
                path: /arts
                method: get

  getListOfClubs:
    handler: bbhsHandler.getListOfClubs
    events:
            - http:
                path: /clubs
                method: get


  # getCoachContactInfo:
  #   handler: teamHandler.getCoachContactInfo
  #   events:
  #           - http:
  #               path: /teams/get-coach-contact
  #               method: get
  #
  # getCoachReminder:
  #   handler: teamHandler.getCoachReminder
  #   events:
  #           - http:
  #               path: /teams/get-coach-reminder
  #               method: get
  #
  # testSpreadsheetAccess:
  #   handler: handler.testSpreadsheetAccess
  #
  # getClubNewsAndAnnouncements:
  #   handler: handler.getClubNewsAndAnnouncements
  #   events:
  #           - http:
  #               path: /news
  #               method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
